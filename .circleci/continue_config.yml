#####################
# COMMON DEFINITIONS
#####################
executors:
  go:
    docker:
      - image: circleci/golang:1.14.0
    working_directory: ~/circleci-demo-monorepo

parameters:
  build-user:
    type: boolean
    default: false
  build-world:
    type: boolean
    default: false

############
# WORKFLOWS
############
workflows:
  version: 2.1

  build-user:
    when: << pipeline.parameters.build-user >>
    jobs:
      - test-service:
          name: build-user
          directory: user
      - build-docker:
          name: deploy-user
          directory: user
          requires:
            - build-user
          context: demo-prod
          filters:
            branches:
              only: master

  build-world:
    when: << pipeline.parameters.build-world >>
    jobs:
      - test-service:
          name: build-world
          directory: world
      - build-docker:
          name: deploy-world
          directory: world
          requires:
            - build-world
          context: demo-prod
          filters:
            branches:
              only: master

##################
# JOB DEFINITIONS
##################
version: 2.1
jobs:
  test-service:
    parameters:
      directory:
        type: string
    executor: go
    steps:
      - checkout
      - restore_cache:
          keys:
            - gomod-<< parameters.directory >>-cache-v1-{{ checksum "<< parameters.directory >>/go.sum" }}
      - run:
          name: Install dependencies
          command: go mod download
          working_directory: << parameters.directory >>
      - run:
          name: Install golint
          command: go get -u golang.org/x/lint/golint
          working_directory: << parameters.directory >>
      - save_cache:
          key: gomod-<< parameters.directory >>-cache-v1-{{ checksum "<< parameters.directory >>/go.sum" }}
          paths:
            - ~/go/pkg/mod
      - run: 
          name: Check code formatting 
          command: |
            files=$(go fmt)
            if [[ $? != 0 ]]; then \
              echo "go fmt ran into an error. Exiting" && exit 1; \
            elif [[ $files ]]; then \
              echo "go fmt found formatting errors in the follow files: $files" && exit 1; \
            else \
              echo "PASS: no formatting issues found"; \
            fi
          working_directory: << parameters.directory >>/cmd/<< parameters.directory >>
      - run:
          name: Run tests
          command: |
            go test
          working_directory: << parameters.directory >>/cmd/<< parameters.directory >>

  build-docker:
    parameters:
      directory:
        type: string
    executor: go
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image, tag it
          command: docker build -t ${TAG} -t ${TAG}:${CIRCLE_SHA1} .
          working_directory: << parameters.directory >>
          environment:
            TAG: mikeyvxt/circleci-demo-monorepo-<< parameters.directory >>
      - run:
          name: Login to Dockerhub and push
          command: |
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push ${TAG}
            docker push ${TAG}:${CIRCLE_SHA1}
          environment:
            TAG: mikeyvxt/circleci-demo-monorepo-<< parameters.directory >>

